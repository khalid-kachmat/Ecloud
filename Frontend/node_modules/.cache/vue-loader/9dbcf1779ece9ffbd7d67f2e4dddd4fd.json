{"remainingRequest":"C:\\Users\\Zolmine\\PhpstormProjects\\dash\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Zolmine\\PhpstormProjects\\dash\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Zolmine\\PhpstormProjects\\dash\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Zolmine\\PhpstormProjects\\dash\\src\\components\\AppointmentForm.vue?vue&type=template&id=43dd0583&scoped=true&","dependencies":[{"path":"C:\\Users\\Zolmine\\PhpstormProjects\\dash\\src\\components\\AppointmentForm.vue","mtime":1625092451732},{"path":"C:\\Users\\Zolmine\\PhpstormProjects\\dash\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Zolmine\\PhpstormProjects\\dash\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Zolmine\\PhpstormProjects\\dash\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Zolmine\\PhpstormProjects\\dash\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}